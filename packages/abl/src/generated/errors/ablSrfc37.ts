/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { ABL_SRFC37_PROGRAM_ADDRESS } from '../programs';

/** InvalidAuthority:  */
export const ABL_SRFC37_ERROR__INVALID_AUTHORITY = 0x1770; // 6000
/** NotSupported:  */
export const ABL_SRFC37_ERROR__NOT_SUPPORTED = 0x1771; // 6001
/** InvalidMintConfig:  */
export const ABL_SRFC37_ERROR__INVALID_MINT_CONFIG = 0x1772; // 6002
/** InvalidABWallet:  */
export const ABL_SRFC37_ERROR__INVALID_A_B_WALLET = 0x1773; // 6003
/** Unauthorized:  */
export const ABL_SRFC37_ERROR__UNAUTHORIZED = 0x1774; // 6004

export type AblSrfc37Error =
  | typeof ABL_SRFC37_ERROR__INVALID_A_B_WALLET
  | typeof ABL_SRFC37_ERROR__INVALID_AUTHORITY
  | typeof ABL_SRFC37_ERROR__INVALID_MINT_CONFIG
  | typeof ABL_SRFC37_ERROR__NOT_SUPPORTED
  | typeof ABL_SRFC37_ERROR__UNAUTHORIZED;

let ablSrfc37ErrorMessages: Record<AblSrfc37Error, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  ablSrfc37ErrorMessages = {
    [ABL_SRFC37_ERROR__INVALID_A_B_WALLET]: ``,
    [ABL_SRFC37_ERROR__INVALID_AUTHORITY]: ``,
    [ABL_SRFC37_ERROR__INVALID_MINT_CONFIG]: ``,
    [ABL_SRFC37_ERROR__NOT_SUPPORTED]: ``,
    [ABL_SRFC37_ERROR__UNAUTHORIZED]: ``,
  };
}

export function getAblSrfc37ErrorMessage(code: AblSrfc37Error): string {
  if (process.env.NODE_ENV !== 'production') {
    return (ablSrfc37ErrorMessages as Record<AblSrfc37Error, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isAblSrfc37Error<TProgramErrorCode extends AblSrfc37Error>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    ABL_SRFC37_PROGRAM_ADDRESS,
    code
  );
}
