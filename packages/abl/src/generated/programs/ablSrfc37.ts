/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddWalletToListInstruction,
  type ParsedCanFreezePermissionlessInstruction,
  type ParsedCanThawPermissionlessInstruction,
  type ParsedInitializeListConfigInstruction,
  type ParsedRemoveWalletFromListInstruction,
  type ParsedSetExtraMetasThawInstruction,
  type ParsedSetListModeInstruction,
} from '../instructions';

export const ABL_SRFC37_PROGRAM_ADDRESS =
  '8hNxmWetsVptuZ5LGYC6fM4xTpoUfPijz3NyYctyM79N' as Address<'8hNxmWetsVptuZ5LGYC6fM4xTpoUfPijz3NyYctyM79N'>;

export enum AblSrfc37Account {
  ABWallet,
  ListConfig,
}

export function identifyAblSrfc37Account(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AblSrfc37Account {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 162, 31, 45, 79, 239, 198, 72])
      ),
      0
    )
  ) {
    return AblSrfc37Account.ABWallet;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([9, 220, 3, 74, 122, 218, 71, 204])
      ),
      0
    )
  ) {
    return AblSrfc37Account.ListConfig;
  }
  throw new Error(
    'The provided account could not be identified as a ablSrfc37 account.'
  );
}

export enum AblSrfc37Instruction {
  AddWalletToList,
  CanFreezePermissionless,
  CanThawPermissionless,
  InitializeListConfig,
  RemoveWalletFromList,
  SetExtraMetasThaw,
  SetListMode,
}

export function identifyAblSrfc37Instruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AblSrfc37Instruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 25, 0, 35, 88, 124, 60, 201])
      ),
      0
    )
  ) {
    return AblSrfc37Instruction.AddWalletToList;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([214, 141, 109, 75, 248, 1, 45, 29])
      ),
      0
    )
  ) {
    return AblSrfc37Instruction.CanFreezePermissionless;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([8, 175, 169, 129, 137, 74, 61, 241])
      ),
      0
    )
  ) {
    return AblSrfc37Instruction.CanThawPermissionless;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([201, 223, 17, 210, 208, 124, 101, 58])
      ),
      0
    )
  ) {
    return AblSrfc37Instruction.InitializeListConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([185, 14, 13, 222, 207, 118, 221, 146])
      ),
      0
    )
  ) {
    return AblSrfc37Instruction.RemoveWalletFromList;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([6, 94, 201, 255, 159, 241, 169, 164])
      ),
      0
    )
  ) {
    return AblSrfc37Instruction.SetExtraMetasThaw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([174, 19, 169, 240, 19, 9, 146, 12])
      ),
      0
    )
  ) {
    return AblSrfc37Instruction.SetListMode;
  }
  throw new Error(
    'The provided instruction could not be identified as a ablSrfc37 instruction.'
  );
}

export type ParsedAblSrfc37Instruction<
  TProgram extends string = '8hNxmWetsVptuZ5LGYC6fM4xTpoUfPijz3NyYctyM79N',
> =
  | ({
      instructionType: AblSrfc37Instruction.AddWalletToList;
    } & ParsedAddWalletToListInstruction<TProgram>)
  | ({
      instructionType: AblSrfc37Instruction.CanFreezePermissionless;
    } & ParsedCanFreezePermissionlessInstruction<TProgram>)
  | ({
      instructionType: AblSrfc37Instruction.CanThawPermissionless;
    } & ParsedCanThawPermissionlessInstruction<TProgram>)
  | ({
      instructionType: AblSrfc37Instruction.InitializeListConfig;
    } & ParsedInitializeListConfigInstruction<TProgram>)
  | ({
      instructionType: AblSrfc37Instruction.RemoveWalletFromList;
    } & ParsedRemoveWalletFromListInstruction<TProgram>)
  | ({
      instructionType: AblSrfc37Instruction.SetExtraMetasThaw;
    } & ParsedSetExtraMetasThawInstruction<TProgram>)
  | ({
      instructionType: AblSrfc37Instruction.SetListMode;
    } & ParsedSetListModeInstruction<TProgram>);
