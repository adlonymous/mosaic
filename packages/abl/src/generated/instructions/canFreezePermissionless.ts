/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { ABL_SRFC37_PROGRAM_ADDRESS } from '../programs';

export const CAN_FREEZE_PERMISSIONLESS_DISCRIMINATOR = new Uint8Array([
  214, 141, 109, 75, 248, 1, 45, 29,
]);

export function getCanFreezePermissionlessDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CAN_FREEZE_PERMISSIONLESS_DISCRIMINATOR
  );
}

export type CanFreezePermissionlessInstruction<
  TProgram extends string = typeof ABL_SRFC37_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<TRemainingAccounts>;

export type CanFreezePermissionlessInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CanFreezePermissionlessInstructionDataArgs = {};

export function getCanFreezePermissionlessInstructionDataEncoder(): FixedSizeEncoder<CanFreezePermissionlessInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    value => ({
      ...value,
      discriminator: CAN_FREEZE_PERMISSIONLESS_DISCRIMINATOR,
    })
  );
}

export function getCanFreezePermissionlessInstructionDataDecoder(): FixedSizeDecoder<CanFreezePermissionlessInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCanFreezePermissionlessInstructionDataCodec(): FixedSizeCodec<
  CanFreezePermissionlessInstructionDataArgs,
  CanFreezePermissionlessInstructionData
> {
  return combineCodec(
    getCanFreezePermissionlessInstructionDataEncoder(),
    getCanFreezePermissionlessInstructionDataDecoder()
  );
}

export type CanFreezePermissionlessInput = {};

export function getCanFreezePermissionlessInstruction<
  TProgramAddress extends Address = typeof ABL_SRFC37_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): CanFreezePermissionlessInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? ABL_SRFC37_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getCanFreezePermissionlessInstructionDataEncoder().encode({}),
  } as CanFreezePermissionlessInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedCanFreezePermissionlessInstruction<
  TProgram extends string = typeof ABL_SRFC37_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: CanFreezePermissionlessInstructionData;
};

export function parseCanFreezePermissionlessInstruction<
  TProgram extends string,
>(
  instruction: Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array>
): ParsedCanFreezePermissionlessInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getCanFreezePermissionlessInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
