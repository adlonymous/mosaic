/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ABL_SRFC37_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SET_EXTRA_METAS_THAW_DISCRIMINATOR = new Uint8Array([
  6, 94, 201, 255, 159, 241, 169, 164,
]);

export function getSetExtraMetasThawDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_EXTRA_METAS_THAW_DISCRIMINATOR
  );
}

export type SetExtraMetasThawInstruction<
  TProgram extends string = typeof ABL_SRFC37_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountListConfig extends string | AccountMeta<string> = string,
  TAccountEbaltsMintConfig extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountExtraMetasThaw extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountListConfig extends string
        ? ReadonlyAccount<TAccountListConfig>
        : TAccountListConfig,
      TAccountEbaltsMintConfig extends string
        ? ReadonlyAccount<TAccountEbaltsMintConfig>
        : TAccountEbaltsMintConfig,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountExtraMetasThaw extends string
        ? WritableAccount<TAccountExtraMetasThaw>
        : TAccountExtraMetasThaw,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetExtraMetasThawInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type SetExtraMetasThawInstructionDataArgs = {};

export function getSetExtraMetasThawInstructionDataEncoder(): FixedSizeEncoder<SetExtraMetasThawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    value => ({ ...value, discriminator: SET_EXTRA_METAS_THAW_DISCRIMINATOR })
  );
}

export function getSetExtraMetasThawInstructionDataDecoder(): FixedSizeDecoder<SetExtraMetasThawInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSetExtraMetasThawInstructionDataCodec(): FixedSizeCodec<
  SetExtraMetasThawInstructionDataArgs,
  SetExtraMetasThawInstructionData
> {
  return combineCodec(
    getSetExtraMetasThawInstructionDataEncoder(),
    getSetExtraMetasThawInstructionDataDecoder()
  );
}

export type SetExtraMetasThawAsyncInput<
  TAccountAuthority extends string = string,
  TAccountListConfig extends string = string,
  TAccountEbaltsMintConfig extends string = string,
  TAccountMint extends string = string,
  TAccountExtraMetasThaw extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  listConfig: Address<TAccountListConfig>;
  ebaltsMintConfig?: Address<TAccountEbaltsMintConfig>;
  mint: Address<TAccountMint>;
  extraMetasThaw?: Address<TAccountExtraMetasThaw>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getSetExtraMetasThawInstructionAsync<
  TAccountAuthority extends string,
  TAccountListConfig extends string,
  TAccountEbaltsMintConfig extends string,
  TAccountMint extends string,
  TAccountExtraMetasThaw extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ABL_SRFC37_PROGRAM_ADDRESS,
>(
  input: SetExtraMetasThawAsyncInput<
    TAccountAuthority,
    TAccountListConfig,
    TAccountEbaltsMintConfig,
    TAccountMint,
    TAccountExtraMetasThaw,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetExtraMetasThawInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountListConfig,
    TAccountEbaltsMintConfig,
    TAccountMint,
    TAccountExtraMetasThaw,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? ABL_SRFC37_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    listConfig: { value: input.listConfig ?? null, isWritable: false },
    ebaltsMintConfig: {
      value: input.ebaltsMintConfig ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    extraMetasThaw: { value: input.extraMetasThaw ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.ebaltsMintConfig.value) {
    accounts.ebaltsMintConfig.value = await getProgramDerivedAddress({
      programAddress:
        'Eba1ts11111111111111111111111111111111111111' as Address<'Eba1ts11111111111111111111111111111111111111'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([77, 73, 78, 84, 95, 67, 79, 78, 70, 73, 71])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.extraMetasThaw.value) {
    accounts.extraMetasThaw.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            116, 104, 97, 119, 95, 101, 120, 116, 114, 97, 95, 97, 99, 99, 111,
            117, 110, 116, 95, 109, 101, 116, 97, 115,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.listConfig),
      getAccountMeta(accounts.ebaltsMintConfig),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.extraMetasThaw),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSetExtraMetasThawInstructionDataEncoder().encode({}),
  } as SetExtraMetasThawInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountListConfig,
    TAccountEbaltsMintConfig,
    TAccountMint,
    TAccountExtraMetasThaw,
    TAccountSystemProgram
  >;

  return instruction;
}

export type SetExtraMetasThawInput<
  TAccountAuthority extends string = string,
  TAccountListConfig extends string = string,
  TAccountEbaltsMintConfig extends string = string,
  TAccountMint extends string = string,
  TAccountExtraMetasThaw extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  listConfig: Address<TAccountListConfig>;
  ebaltsMintConfig: Address<TAccountEbaltsMintConfig>;
  mint: Address<TAccountMint>;
  extraMetasThaw: Address<TAccountExtraMetasThaw>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getSetExtraMetasThawInstruction<
  TAccountAuthority extends string,
  TAccountListConfig extends string,
  TAccountEbaltsMintConfig extends string,
  TAccountMint extends string,
  TAccountExtraMetasThaw extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ABL_SRFC37_PROGRAM_ADDRESS,
>(
  input: SetExtraMetasThawInput<
    TAccountAuthority,
    TAccountListConfig,
    TAccountEbaltsMintConfig,
    TAccountMint,
    TAccountExtraMetasThaw,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetExtraMetasThawInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountListConfig,
  TAccountEbaltsMintConfig,
  TAccountMint,
  TAccountExtraMetasThaw,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ABL_SRFC37_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    listConfig: { value: input.listConfig ?? null, isWritable: false },
    ebaltsMintConfig: {
      value: input.ebaltsMintConfig ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    extraMetasThaw: { value: input.extraMetasThaw ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.listConfig),
      getAccountMeta(accounts.ebaltsMintConfig),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.extraMetasThaw),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSetExtraMetasThawInstructionDataEncoder().encode({}),
  } as SetExtraMetasThawInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountListConfig,
    TAccountEbaltsMintConfig,
    TAccountMint,
    TAccountExtraMetasThaw,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSetExtraMetasThawInstruction<
  TProgram extends string = typeof ABL_SRFC37_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    listConfig: TAccountMetas[1];
    ebaltsMintConfig: TAccountMetas[2];
    mint: TAccountMetas[3];
    extraMetasThaw: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: SetExtraMetasThawInstructionData;
};

export function parseSetExtraMetasThawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetExtraMetasThawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      listConfig: getNextAccount(),
      ebaltsMintConfig: getNextAccount(),
      mint: getNextAccount(),
      extraMetasThaw: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSetExtraMetasThawInstructionDataDecoder().decode(instruction.data),
  };
}
