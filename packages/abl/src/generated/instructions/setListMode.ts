/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit';
import { ABL_SRFC37_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getModeDecoder,
  getModeEncoder,
  type Mode,
  type ModeArgs,
} from '../types';

export const SET_LIST_MODE_DISCRIMINATOR = new Uint8Array([
  174, 19, 169, 240, 19, 9, 146, 12,
]);

export function getSetListModeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_LIST_MODE_DISCRIMINATOR
  );
}

export type SetListModeInstruction<
  TProgram extends string = typeof ABL_SRFC37_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountListConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountListConfig extends string
        ? ReadonlyAccount<TAccountListConfig>
        : TAccountListConfig,
      ...TRemainingAccounts,
    ]
  >;

export type SetListModeInstructionData = {
  discriminator: ReadonlyUint8Array;
  mode: Mode;
};

export type SetListModeInstructionDataArgs = { mode: ModeArgs };

export function getSetListModeInstructionDataEncoder(): FixedSizeEncoder<SetListModeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['mode', getModeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_LIST_MODE_DISCRIMINATOR })
  );
}

export function getSetListModeInstructionDataDecoder(): FixedSizeDecoder<SetListModeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['mode', getModeDecoder()],
  ]);
}

export function getSetListModeInstructionDataCodec(): FixedSizeCodec<
  SetListModeInstructionDataArgs,
  SetListModeInstructionData
> {
  return combineCodec(
    getSetListModeInstructionDataEncoder(),
    getSetListModeInstructionDataDecoder()
  );
}

export type SetListModeInput<
  TAccountAuthority extends string = string,
  TAccountListConfig extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  listConfig: Address<TAccountListConfig>;
  mode: SetListModeInstructionDataArgs['mode'];
};

export function getSetListModeInstruction<
  TAccountAuthority extends string,
  TAccountListConfig extends string,
  TProgramAddress extends Address = typeof ABL_SRFC37_PROGRAM_ADDRESS,
>(
  input: SetListModeInput<TAccountAuthority, TAccountListConfig>,
  config?: { programAddress?: TProgramAddress }
): SetListModeInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountListConfig
> {
  // Program address.
  const programAddress = config?.programAddress ?? ABL_SRFC37_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    listConfig: { value: input.listConfig ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.listConfig),
    ],
    programAddress,
    data: getSetListModeInstructionDataEncoder().encode(
      args as SetListModeInstructionDataArgs
    ),
  } as SetListModeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountListConfig
  >;

  return instruction;
}

export type ParsedSetListModeInstruction<
  TProgram extends string = typeof ABL_SRFC37_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    listConfig: TAccountMetas[1];
  };
  data: SetListModeInstructionData;
};

export function parseSetListModeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetListModeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      listConfig: getNextAccount(),
    },
    data: getSetListModeInstructionDataDecoder().decode(instruction.data),
  };
}
