/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const A_B_WALLET_DISCRIMINATOR = new Uint8Array([
  111, 162, 31, 45, 79, 239, 198, 72,
]);

export function getABWalletDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(A_B_WALLET_DISCRIMINATOR);
}

export type ABWallet = {
  discriminator: ReadonlyUint8Array;
  wallet: Address;
  listConfig: Address;
};

export type ABWalletArgs = { wallet: Address; listConfig: Address };

export function getABWalletEncoder(): FixedSizeEncoder<ABWalletArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['wallet', getAddressEncoder()],
      ['listConfig', getAddressEncoder()],
    ]),
    value => ({ ...value, discriminator: A_B_WALLET_DISCRIMINATOR })
  );
}

export function getABWalletDecoder(): FixedSizeDecoder<ABWallet> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['wallet', getAddressDecoder()],
    ['listConfig', getAddressDecoder()],
  ]);
}

export function getABWalletCodec(): FixedSizeCodec<ABWalletArgs, ABWallet> {
  return combineCodec(getABWalletEncoder(), getABWalletDecoder());
}

export function decodeABWallet<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ABWallet, TAddress>;
export function decodeABWallet<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ABWallet, TAddress>;
export function decodeABWallet<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ABWallet, TAddress> | MaybeAccount<ABWallet, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getABWalletDecoder()
  );
}

export async function fetchABWallet<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ABWallet, TAddress>> {
  const maybeAccount = await fetchMaybeABWallet(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeABWallet<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ABWallet, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeABWallet(maybeAccount);
}

export async function fetchAllABWallet(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ABWallet>[]> {
  const maybeAccounts = await fetchAllMaybeABWallet(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeABWallet(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ABWallet>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map(maybeAccount => decodeABWallet(maybeAccount));
}

export function getABWalletSize(): number {
  return 72;
}
