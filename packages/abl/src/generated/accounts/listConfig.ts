/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getModeDecoder,
  getModeEncoder,
  type Mode,
  type ModeArgs,
} from '../types';

export const LIST_CONFIG_DISCRIMINATOR = new Uint8Array([
  9, 220, 3, 74, 122, 218, 71, 204,
]);

export function getListConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LIST_CONFIG_DISCRIMINATOR);
}

export type ListConfig = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  seed: Address;
  mode: Mode;
  bump: number;
};

export type ListConfigArgs = {
  authority: Address;
  seed: Address;
  mode: ModeArgs;
  bump: number;
};

export function getListConfigEncoder(): FixedSizeEncoder<ListConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['seed', getAddressEncoder()],
      ['mode', getModeEncoder()],
      ['bump', getU8Encoder()],
    ]),
    value => ({ ...value, discriminator: LIST_CONFIG_DISCRIMINATOR })
  );
}

export function getListConfigDecoder(): FixedSizeDecoder<ListConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['seed', getAddressDecoder()],
    ['mode', getModeDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getListConfigCodec(): FixedSizeCodec<
  ListConfigArgs,
  ListConfig
> {
  return combineCodec(getListConfigEncoder(), getListConfigDecoder());
}

export function decodeListConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ListConfig, TAddress>;
export function decodeListConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ListConfig, TAddress>;
export function decodeListConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ListConfig, TAddress> | MaybeAccount<ListConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getListConfigDecoder()
  );
}

export async function fetchListConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ListConfig, TAddress>> {
  const maybeAccount = await fetchMaybeListConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeListConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ListConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeListConfig(maybeAccount);
}

export async function fetchAllListConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ListConfig>[]> {
  const maybeAccounts = await fetchAllMaybeListConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeListConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ListConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map(maybeAccount => decodeListConfig(maybeAccount));
}

export function getListConfigSize(): number {
  return 74;
}
